schema = {
    SOI
    ~ (namespace | import_statement | config_block | enum_declaration | model_declaration | constant_statement | dataset_declaration | interface_declaration | middleware_declaration | config_declaration | decorator_declaration | pipeline_item_declaration | action_group_declaration | comment_block | availability_start | availability_end | EMPTY_LINES | CATCH_ALL)*
    ~ EOI
}

// #############
// constants
// #############
WHITESPACE = _{ SPACE_SEPARATOR | "\t" }
EMPTY_LINES = @{ (WHITESPACE* ~ NEWLINE)+ }
BLOCK_OPEN = { "{" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }
BLOCK_CLOSE = { "}" }
ENUM_KEYWORD = { "enum" }
MODEL_KEYWORD = { "model" }
UNIQUE_KEYWORD = { "unique" }
VARIANT_KEYWORD = { "variant" }
FIELD_KEYWORD = { "field" }
RELATION_KEYWORD = { "relation" }
PROPERTY_KEYWORD = { "property" }
MEMBER_KEYWORD = { "member" }
PIPELINE_KEYWORD = _{ "pipeline" }
ITEM_KEYWORD = _{ "item" }
SERVER_KEYWORD = { "server" }
CONNECTOR_KEYWORD = { "connector" }
CLIENT_KEYWORD = { "client" }
ENTITY_KEYWORD = { "entity" }
DEBUG_KEYWORD = { "debug" }
TEST_KEYWORD = { "test" }
NAMESPACE_KEYWORD = { "namespace" }
STATIC_FILES_KEYWORD = { "static files" }
FAT_ARROW_KEYWORD = { "=>" }
IMPORT_KEYWORD = _{ "import" }
FROM_KEYWORD = _{ "from" }
DATASET_KEYWORD = _{ "dataset" }
AUTOSEED_KEYWORD = { "autoseed" }
NOTRACK_KEYWORD = { "notrack" }
GROUP_KEYWORD = _{ "group" }
RECORD_KEYWORD = _{ "record" }
DECLARE_KEYWORD = _{ "declare" }
CONFIG_KEYWORD = _{ "config" }
MIDDLEWARE_KEYWORD = _{ "middleware" }
DECORATOR_KEYWORD = _{ "decorator" }
ACTION_KEYWORD = _{ "action" }
USING_KEYWORD = _{ "using" }
JSON_KEYWORD = _{ "json" }
FORM_KEYWORD = _{ "form" }
INTERFACE_KEYWORD = { "interface" }
OPTION_KEYWORD = { "option" }
EXTENDS_KEYWORD = _{ "extends" }
COLON = _{ ":" }
TRAILING_COMMA = @{ "," }
OPTIONAL = { "?" }
HASH_TAG = { "#" }
CATCH_ALL = { (!NEWLINE ~ ANY)+ ~ NEWLINE? }
BLOCK_LEVEL_CATCH_ALL = { !BLOCK_CLOSE ~ CATCH_ALL }

// #############
// identifier
// #############
identifier = @{ ASCII_ALPHANUMERIC ~ ( "_" | ASCII_ALPHANUMERIC)* }
identifier_path = { identifier ~ ("." ~ identifier)* }

// #############
// type
// #############
type_expression = { (type_item | type_group | type_tuple) ~ (BI_OR ~ (type_item | type_group | type_tuple))* }
type_item = { identifier_path ~ type_generics? ~ OPTIONAL? ~ arity? ~ OPTIONAL? }
type_generics = { "<" ~ type_expression ~ ("," ~ type_expression)* ~ ","? ~ ">" }
arity = {"[]" | "{}" }
type_group = { "(" ~ type_expression ~ ")" ~ OPTIONAL? }
type_tuple = { "(" ~ type_expression ~ "," ~ type_expression? ~ ("," ~ type_expression)* ~ ","? ~ ")" ~ OPTIONAL? }

// #############
// generics
// #############
generics_declaration = { "<" ~ identifier ~ ("," ~ identifier)* ~ "," ~ ">" }
generics_constraint = { "where" ~ generics_constraint_item ~ ("," ~ generics_constraint_item)* ~ "," }
generics_constraint_item = { identifier ~ ":" ~ type_expression }

// #############
// import
// #############

import_statement = {
    IMPORT_KEYWORD
    ~ (import_identifier_list ~ FROM_KEYWORD)?
    ~ string_literal
}

import_identifier_list = { "{" ~ (identifier ~ ("," ~ identifier)*)? ~ TRAILING_COMMA? ~ BLOCK_CLOSE }

// #############
// numeric literals
// #############
numeric_literal = @{ ("-")? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

// #############
// string literals
// #############
ASCII_CONTROL_CHARACTER = _{ '\u{0000}'..'\u{001F}' }
string_escape = _{ "\\" ~ ANY }
string_content = @{ (string_escape | !("\"" | ASCII_CONTROL_CHARACTER) ~ ANY)* }
string_literal = ${ "\"" ~ string_content ~ "\"" }

// #############
// regexp literals
// #############
regexp_content = @{ (string_escape | !("/") ~ ANY)+ }
regexp_literal = ${ "/" ~ regexp_content ~ "/" }

// #############
// bool literals
// #############
bool_literal = @{ "true" | "false" }

// #############
// null literals
// #############
null_literal = { "null" }

// #############
// enum variant literals
// #############
enum_variant_literal = { "." ~ identifier ~ argument_list? }

// #############
// tuple literals
// #############
tuple_literal = { "(" ~ (WHITE_SPACE | NEWLINE | comment_block)* ~ ("," | (expression ~ (WHITE_SPACE | NEWLINE | comment_block)* ~ "," ~ (WHITE_SPACE | NEWLINE | comment_block)* ~ ( expression ~ (WHITE_SPACE | NEWLINE | comment_block)* ~ ("," ~ (WHITE_SPACE | NEWLINE | comment_block)* ~ expression)* ~ (WHITE_SPACE | NEWLINE | comment_block)* ~ ","?)*)) ~ (WHITE_SPACE | NEWLINE | comment_block)* ~ ")" }

// #############
// array literals
// #############
array_literal = { "[" ~ (WHITE_SPACE | NEWLINE | comment_block)* ~ (expression ~ (NEWLINE | comment_block)* ~ ( "," ~ (NEWLINE | comment_block)* ~ expression )* ~ (NEWLINE | comment_block)* ~ ","?)? ~ (NEWLINE | comment_block)* ~ "]" }

// #############
// dict literals
// #############
named_expression = { expression ~ ":" ~ expression }
dictionary_literal = { "{" ~ (WHITE_SPACE | NEWLINE | comment_block)* ~ (named_expression ~ ( (NEWLINE | comment_block)* ~ "," ~ (NEWLINE | comment_block)* ~ named_expression )* ~ (NEWLINE | comment_block)* ~ ","? ~ (NEWLINE | comment_block)*)? ~ BLOCK_CLOSE }

// #############
// subscript
// #############
subscript = { "[" ~ expression ~ "]" }

// #############
// comments
// #############
comment_token = { "@" ~ (!(WHITESPACE | NEWLINE) ~ ANY)+ }
doc_content = @{ (!NEWLINE ~ ANY)* }
triple_comment = { WHITESPACE* ~ "///" ~ comment_token? ~ doc_content }
double_comment = { WHITESPACE* ~ (!"///") ~ "//" ~ doc_content }
triple_comment_block = { (triple_comment ~ NEWLINE?)+ }
double_comment_block = { (double_comment ~ NEWLINE?)+ }
comment_block = { triple_comment_block | double_comment_block }

// #############
// operators
// #############
ADD = { "+" }
SUB = { "-" }
MUL = { "*" }
DIV = { (!"/")  ~ "/" }
MOD = { "%" }
NEG = { "-" }
BI_AND = { "&" }
BI_XOR = { "^" }
BI_OR = { "|" }
BI_NEG = { "~" }
BI_LS = { "<<" }
BI_RS = { ">>" }
LT = { "<" }
LTE = { "<=" }
GT = { ">" }
GTE = { ">=" }
OR = { "||" }
AND = { "&&" }
NOT = { "!" }
EQ = { "==" }
NEQ = { "!=" }
NULLISH_COALESCING = { "??" }
RANGE_OPEN = { ".." }
RANGE_CLOSE = { "..." }
BINARY_OPERATOR = _{ MUL | DIV | MOD | ADD | SUB | BI_AND | BI_XOR | BI_OR | BI_LS | BI_RS | OR | AND | NOT | NULLISH_COALESCING | EQ | NEQ | RANGE_CLOSE | RANGE_OPEN }
UNARY_OPERATOR = _{ NEG | BI_NEG | NOT }
arith_expr = { UNARY_OPERATOR? ~ operand ~ (BINARY_OPERATOR ~ UNARY_OPERATOR? ~ operand)* }

// #############
// group
// #############
group = { "(" ~ expression ~ ")" }

// #############
// unit & expression
// #############

unit = {
    group |
    null_literal |
    bool_literal |
    numeric_literal |
    string_literal |
    regexp_literal |
    enum_variant_literal |
    tuple_literal |
    array_literal |
    dictionary_literal |
    identifier
    ~ (subscript | argument_list | "." ~ identifier)*
}

identifier_unit = {
    identifier
    ~ (subscript | argument_list | (NEWLINE | WHITESPACE)* ~ "." ~ (NEWLINE | WHITESPACE)* ~ identifier)*
}

operand = { unit | pipeline }

expression = {
    arith_expr |
    unit |
    pipeline
}

// #############
// variable & constant declaration
// #############

constant_statement = { "let" ~ identifier ~ "=" ~ expression }

// #############
// arguments
// #############
argument_list = { "(" ~ (NEWLINE | WHITESPACE)* ~ (argument ~ ((NEWLINE | WHITESPACE)* ~ "," ~ (NEWLINE | WHITESPACE)* ~ argument ~ (NEWLINE | WHITESPACE)*)*)? ~ TRAILING_COMMA? ~ (NEWLINE | WHITESPACE)* ~ ")" }
argument = { named_argument | empty_argument | expression }
empty_argument = { identifier ~ ":" }
named_argument = { identifier ~ ":" ~ expression }

// #############
// function call, decorator and pipeline
// #############
item_decorator = { "@" ~ identifier_unit }
pipeline = { "$" ~ identifier_unit }

// #############
// arguments declaration
// #############
argument_list_declaration = { "(" ~ (NEWLINE | WHITESPACE)* ~ (argument_declaration ~ ((NEWLINE | WHITESPACE)* ~ "," ~ (NEWLINE | WHITESPACE)* ~ argument_declaration ~ (NEWLINE | WHITESPACE)*)*)? ~ TRAILING_COMMA? ~ (NEWLINE | WHITESPACE)* ~ ")" }
argument_declaration = { identifier ~ OPTIONAL? ~ ":" ~ type_expression }

// #############
// config blocks
// #############

config_keywords = { SERVER_KEYWORD | CONNECTOR_KEYWORD | CLIENT_KEYWORD | ENTITY_KEYWORD | DEBUG_KEYWORD | TEST_KEYWORD }

config_block = {
    config_keywords
    ~ identifier?
    ~ BLOCK_OPEN
    ~ (config_item | comment_block | EMPTY_LINES | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
}

config_item = {
    identifier ~ expression
}

// #############
// enum
// #############
enum_declaration = {
    triple_comment_block?
    ~ (item_decorator ~ (NEWLINE | WHITESPACE)*)*
    ~ INTERFACE_KEYWORD?
    ~ OPTION_KEYWORD?
    ~ ENUM_KEYWORD
    ~ identifier
    ~ BLOCK_OPEN
    ~ (enum_member_declaration | comment_block | EMPTY_LINES | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
}

enum_member_declaration = {
    triple_comment_block? ~
    (item_decorator ~ double_comment_block? ~ (NEWLINE | WHITESPACE)*)* ~
    identifier ~ ("=" ~ enum_member_expression)?
}

enum_member_expression = { arith_expr | string_literal | numeric_literal }

// #############
// model
// #############
model_declaration = {
    triple_comment_block? ~
    (item_decorator ~ (NEWLINE | WHITESPACE)*)*
    ~ MODEL_KEYWORD
    ~ identifier
    ~ BLOCK_OPEN
    ~ (field_declaration | comment_block | EMPTY_LINES | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
}

// #############
// field
// #############
field_declaration = {
    triple_comment_block? ~
    (item_decorator ~ double_comment_block? ~ (NEWLINE | WHITESPACE)*)*
    ~ identifier
    ~ COLON
    ~ type_expression
//     ~ double_comment_block?
//     ~ NEWLINE?
}

// #############
// dataset
// #############
dataset_declaration = {
    (AUTOSEED_KEYWORD | NOTRACK_KEYWORD)? ~ DATASET_KEYWORD ~ identifier ~ BLOCK_OPEN ~ (EMPTY_LINES | comment_block | dataset_group_declaration)* ~ BLOCK_CLOSE
}
dataset_group_declaration = {
    GROUP_KEYWORD ~ identifier_path ~ BLOCK_OPEN ~ (EMPTY_LINES | comment_block | dataset_group_record_declaration)* ~ BLOCK_CLOSE
}
dataset_group_record_declaration = {
    RECORD_KEYWORD ~ identifier ~ dictionary_literal
}

// #############
// declare
// #############
decorator_declaration = {
    triple_comment_block? ~
    DECLARE_KEYWORD ~
    UNIQUE_KEYWORD? ~
    (MODEL_KEYWORD | ENUM_KEYWORD | INTERFACE_KEYWORD) ~
    (FIELD_KEYWORD | RELATION_KEYWORD | PROPERTY_KEYWORD | MEMBER_KEYWORD)? ~
    DECORATOR_KEYWORD ~
    identifier ~
    (generics_declaration? ~ argument_list_declaration ~ generics_constraint?)? ~
    (BLOCK_OPEN ~
    decorator_variant_declaration ~
    BLOCK_CLOSE)?
}

decorator_variant_declaration = {
    triple_comment_block? ~
    VARIANT_KEYWORD ~
    (generics_declaration? ~ argument_list_declaration ~ generics_constraint?)?
}

pipeline_item_declaration = {
    triple_comment_block? ~
    DECLARE_KEYWORD ~ PIPELINE_KEYWORD ~ ITEM_KEYWORD ~
    identifier ~
    (
      (
        (generics_declaration? ~ argument_list_declaration)? ~
        COLON ~
        type_expression ~
        "->" ~
        type_expression ~ generics_constraint?
      ) | (
        BLOCK_OPEN ~ pipeline_item_variant_declaration ~ BLOCK_CLOSE
      )
    )
}

pipeline_item_variant_declaration = {
    triple_comment_block? ~
    VARIANT_KEYWORD ~
    generics_declaration? ~ argument_list_declaration ~
    COLON ~
    type_expression ~
    "->" ~
    type_expression ~ generics_constraint?
}

action_group_declaration = {
    DECLARE_KEYWORD ~ ACTION_KEYWORD ~ GROUP_KEYWORD ~ identifier ~ BLOCK_OPEN
    ~ (comment_block | action_declaration | EMPTY_LINES | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
}

req_type = {
    JSON_KEYWORD | FORM_KEYWORD
}

action_declaration = {
    DECLARE_KEYWORD ~ ACTION_KEYWORD ~ identifier ~ "(" ~ type_expression ~ ")" ~ COLON ~ type_expression ~ (USING_KEYWORD ~ req_type)?
}

middleware_declaration = {
    DECLARE_KEYWORD ~ MIDDLEWARE_KEYWORD ~ identifier ~ argument_list_declaration?
}

config_declaration = {
  triple_comment_block? ~
  DECLARE_KEYWORD ~
  CONFIG_KEYWORD ~
  identifier ~
  BLOCK_OPEN ~
  (field_declaration | comment_block | EMPTY_LINES | BLOCK_LEVEL_CATCH_ALL)* ~
  BLOCK_CLOSE
}

// #############
// interface
// #############

interface_declaration = {
    triple_comment_block? ~ INTERFACE_KEYWORD ~ identifier ~ generics_declaration ~ (EXTENDS_KEYWORD ~ type_expression ~ ("," ~ type_expression)* ~ ","?)? ~ generics_constraint? ~ BLOCK_OPEN
    ~ (field_declaration | comment_block | EMPTY_LINES | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
}

// #############
// namespace
// #############
namespace = {
    triple_comment_block? ~
    NAMESPACE_KEYWORD ~ identifier
    ~ BLOCK_OPEN
    ~ (namespace | config_block | enum_declaration | model_declaration | constant_statement | dataset_declaration | interface_declaration | middleware_declaration | decorator_declaration | config_declaration | pipeline_item_declaration | action_group_declaration | static_files_declaration | comment_block | availability_start | availability_end | EMPTY_LINES | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
}

// #############
// static files
// #############
static_files_declaration = {
    STATIC_FILES_KEYWORD ~ expression ~ FAT_ARROW_KEYWORD ~ expression
}

// #############
// availability
// #############
availability_start = {
    HASH_TAG ~ "available" ~ "(" ~ identifier ~ ")"
}

availability_end = {
  HASH_TAG ~ "end"
}